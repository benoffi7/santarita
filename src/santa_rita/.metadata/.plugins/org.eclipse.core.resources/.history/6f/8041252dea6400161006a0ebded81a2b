import hfl.argentina.HasarException;
import hfl.argentina.HasarImpresoraFiscalRG3561;
import hfl.argentina.HasarImpresoraFiscalRG3561.ModosDeMonto;
import hfl.argentina.HasarImpresoraFiscalRG3561.ModosDePrecio;
import hfl.argentina.HasarImpresoraFiscalRG3561.TiposComprobante;

/**
 * Clase que implementa la conexión
 * entre el driver de la impresora fiscal y la aplicación
 */
public class FiscalPrinter
{
    private HasarImpresoraFiscalRG3561 fiscalPrinter;

    public FiscalPrinter()
    {
	this.fiscalPrinter = new HasarImpresoraFiscalRG3561();
    }

    public void conectar()
    {
	fiscalPrinter.conectar("");
    }

    /**
     * Apertura del comprobante tipo Tiquet
     */
    public void openTiquet()
    {
	try
	{
	    this.fiscalPrinter.AbrirDocumento(TiposComprobante.TIQUE);
	} catch (HasarException e)
	{
	    e.printStackTrace();
	}
    }

    /**
     * Imprime y cierra el comprobante tipo Tiquet
     */
    public void closeTiquet()
    {
	try
	{
	    this.fiscalPrinter.CerrarDocumento();
	} catch (HasarException e)
	{
	    e.printStackTrace();
	}
    }

    /**
     * Impresión de un ítem en el comprobante
     *
     * @param description
     *            Descripción del ítem a imprimir en el comprobante
     * @param quantity
     *            Cantidad de unidades del bien vendido
     * @param price_unity
     *            Precio por unidad de medida
     */
    public void addItem(String description, float quantity, float price_unity)
    {
	try
	{
	    this.fiscalPrinter.ImprimirItem(description.toLowerCase(), quantity, price_unity, null, 21.00,
		    ModosDeMonto.MODO_SUMA_MONTO, null, 0.0, null, ModosDePrecio.MODO_PRECIO_BASE, 0, null, null, null);
	} catch (HasarException e)
	{
	    e.printStackTrace();
	}
    }

    /**
     * Elimina un ítem ya impreso en el comprobante
     *
     * @param description
     *            Descripción del ítem a eliminar del comprobante
     * @param quantity
     *            Cantidad de unidades a eliminar
     * @param price_unity
     *            Precio por unidad de medida
     */
    public void removeItem(String description, float quantity, float price_unity)
    {
	/*
	 * No se permite el canje o devolución de ítems no preexistente
	 * o en cantidad insuficiente para realizar la sustracción
	 */
	try
	{
	    this.fiscalPrinter.ImprimirItem(description.toLowerCase(), quantity, price_unity, null, 21.00,
		    ModosDeMonto.MODO_RESTA_MONTO, null, 0.0, null, ModosDePrecio.MODO_PRECIO_BASE, 0, null, null,
		    null);
	} catch (HasarException e)
	{
	    e.printStackTrace();
	}
    }

    /**
     * Aplica un descuento al último ítem incluido en el comprobante
     */
    public void addDiscount(String description, float amount)
    {
	try
	{
	    this.fiscalPrinter.ImprimirDescuentoItem(description, amount, null, ModosDePrecio.MODO_PRECIO_BASE);
	} catch (HasarException e)
	{
	    e.printStackTrace();
	}
    }
}
