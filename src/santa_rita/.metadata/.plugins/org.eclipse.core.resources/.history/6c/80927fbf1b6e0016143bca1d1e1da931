import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;

public class FiscalPrinter
{
    // Archivo donde se guardan los comandos
    private static FileWriter file;

    // Comandos para la impresora fiscal
    private String command;

    public FiscalPrinter()
    {
	this.command = "";
	try
	{
	    FiscalPrinter.file = new FileWriter(new File("comandos.txt"));
	} catch (IOException e)
	{
	    e.printStackTrace();
	}
    }

    // Consulta del estado del controlador fiscal y el hardware de la impresora
    public void statusRequest() throws IOException
    {
	this.command += Utils.statusRequest;
    }

    // Responde abriendo un tiquet e imprimiendo el encabezado
    public void openFiscalReceipt()
    {
	this.command += Utils.openFiscalReceipt + Utils.FS + Utils.TIQUET + Utils.FS + Utils.TIQUET;
    }

    // Responde imprimiendo los datos descriptivos de una venta
    public void printFiscalText(String descripcion, String modoDisplay)
    {
	this.command += Utils.printFiscalText + Utils.FS + descripcion + Utils.FS + modoDisplay + Utils.FS;
    }

    // Responde imprimiendo los datos descriptivos de una venta
    // Por defecto no modifica el display
    public void printFiscalText(String descripcion)
    {
	this.command += Utils.printFiscalText + Utils.FS + descripcion + Utils.FS + Utils.NO_DISPLAY + Utils.FS;
    }

    // Responde imprimiendo en el comprobante la informacion asociada al item
    public void printLineItem(String detalle, float cantidad, double monto, double IVA, String modoImputacion,
	    double impuesto, String modoDisplay, String modoPrecio)
    {
	this.command += Utils.printLineItem + Utils.FS + detalle + Utils.FS + Double.toString(cantidad) + Utils.FS
		+ Double.toString(monto) + Utils.FS + Double.toString(IVA) + Utils.FS + modoImputacion + Utils.FS
		+ Double.toString(impuesto) + Utils.FS + modoDisplay + Utils.FS + modoPrecio + Utils.FS;
    }
    
    // Responde imprimiendo en el comprobante la informacion asociada al item
    public void printLineItem(String detalle, float cantidad, double monto, double IVA)
    {
	this.command += Utils.printLineItem + Utils.FS + detalle + Utils.FS + Double.toString(cantidad) + Utils.FS
		+ Double.toString(monto) + Utils.FS + Double.toString(IVA) + Utils.FS + Utils.SUMA_MONTO + Utils.FS
		+ Double.toString(0) + Utils.FS + Utils.NO_DISPLAY + Utils.FS + Utils.PRECIO_TOTAL + Utils.FS;
    }

    // Ejecutar spooler.exe
    public void execute()
    {
	try
	{
	    PrintWriter print = null;
	    try
	    {
		print = new PrintWriter(file);
		print.write(command);
	    } finally
	    {
		print.close();
	    }
	    // COM1
	    String[] cmd = { "wspooler.exe", "-p1", "-f comandos.txt" };
	    Runtime.getRuntime().exec(cmd);
	} catch (IOException e)
	{
	    System.out.println("Error al ejecutar spooler.exe: " + e.getMessage());
	}
    }
}
